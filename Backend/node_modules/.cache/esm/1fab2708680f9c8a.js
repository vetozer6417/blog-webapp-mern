let Schema,model,hash,compare,sign;_680‍.x([["default",()=>_680‍.o]]);_680‍.w("mongoose",[["Schema",["Schema"],function(v){Schema=v}],["model",["model"],function(v){model=v}]]);_680‍.w("bcryptjs",[["hash",["hash"],function(v){hash=v}],["compare",["compare"],function(v){compare=v}]]);_680‍.w("jsonwebtoken",[["sign",["sign"],function(v){sign=v}]]);



const UserSchema = new Schema({
    avatar: {type: String, default: ""},
    name: {type:String, required: true},
    email: {type:String, required: true},
    password: {type:String, required: true},
    verified: {type:Boolean, default:false},
    verificationCode: {type:String, required:false},
    admin: {type:Boolean, default:false}
    }, { timestamps:true }
)

UserSchema.pre('save', async function(next) {
    //if password is modified or not
    if(this.isModified('password')) {
        //encrypt password in hash using bcryptjs
        this.password = await hash(this.password, 10)
        return next()
    }
    return next()
})

//Token
UserSchema.methods.generateJWT = async function() {
    return await sign({ id: this._id }, process.env.JWT_SECRET, {
        expiresIn: '30d',
    })
}

UserSchema.methods.comparePassword = async function ( enteredPassword ) {
    return await compare(enteredPassword,this.password)
}

const User = model("User", UserSchema)
_680‍.d(User);