let verify,User;_5f6‍.x([["authGuard",()=>authGuard]]);_5f6‍.w("jsonwebtoken",[["verify",["verify"],function(v){verify=v}]]);_5f6‍.w("../models/User",[["default",["User"],function(v){User=v}]]);


       const authGuard = async (req,res,next) => {
    if(req.headers.authorization && req.headers.authorization.startsWith("Bearer")) {
        try {
            //split first index of Token
            const token = req.headers.authorization.split(" ")[1]
            const {id} = verify(token, process.env.JWT_SECRET)
            req.user = await User.findById(id).select('-password') //deselect password
            next()
        } catch (error) {
            let err = new Error("Not authorized, Token failed")
            err.statusCode = 401
            next(err)
        }
    } else {
        let error = new Error("Not authorized, No token..")
        error.statusCode = 401
        next(error)
    }
}