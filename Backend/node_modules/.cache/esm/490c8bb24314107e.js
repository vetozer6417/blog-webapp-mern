let User;_431‍.x([["registerUser",()=>registerUser],["loginUser",()=>loginUser],["userProfile",()=>userProfile]]);_431‍.w("../models/User",[["default",["User"],function(v){User=v}]]);

const registerUser = async (req,res,next) => {
    try {
        const { name,email,password } = req.body
        
        //Check whther user exists or not
        let user = await User.findOne({email})
        if(user) {
            //If user exists --> bad request
            throw new Error("User have already registered")
        }
        //creating a new user if it's not exist
        user = await User.create({
            name,
            email,
            password,
        })

        return res.status(201).json({
            _id: user._id,
            avatar: user.avatar,
            name: user.name,
            email: user.email,
            verified: user.verified,
            admin: user.admin,
            token: await user.generateJWT(),
        })
    } catch (error) {
        //return res.status(500).json({message: "Something went wrong!"})
        next(error)
    }
}

const loginUser = async (req,res,next) => {
    try {
        const { email, password } = req.body //pull email and pw from req.body

        let user = await User.findOne({ email })

        if(!user) {
            throw new Error("Email not found!")
        }

        //if password matched
        if(await user.comparePassword(password)) {
            return res.status(201).json({
                _id: user._id,
                avatar: user.avatar,
                name: user.name,
                email: user.email,
                verified: user.verified,
                admin: user.admin,
                token: await user.generateJWT(),
            })
        } else {
            throw new Error("Invalid email or password")
        }
    } catch (error) {
        next(error)
    }
}

const userProfile = async (req,res,next) => {
    try {
        let user = await User.findById(req.user._id) //from authMiddleWare.js line 12: req.user
        if(user) {
            return res.status(201).json({
                _id: user._id,
                avatar: user.avatar,
                name: user.name,
                email: user.email,
                verified: user.verified,
                admin: user.admin,
            })
        } else {
            let error = new Error("User not found")
            error.statusCode = 404
            next(error)
        }
    } catch (error) {
        next(error)
    }
}

const updateProfile = async (req,res,next) => { 
    try {
        let user = await User.findById(req.user._id)
    } catch (error) {
        next(error)
    }
}

